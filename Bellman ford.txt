#include <iostream>
#include <vector>
#include <climits>

using namespace std;

struct Edge {
    int src, dest, weight;
};

// Bellman-Ford Algorithm
void bellmanFord(int V, int E, int src, vector<Edge>& edges) {
    vector<int> dist(V, INT_MAX);
    dist[src] = 0;

    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }

    for (int i = 0; i < E; i++) {
        int u = edges[i].src;
        int v = edges[i].dest;
        int weight = edges[i].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains negative weight cycle" << endl;
            return;
        }
    }
    cout << endl;
    // Print shortest distances
    for (int i = 0; i < V; i++)
        cout << "Vertex " << i << " Distance from Source: " << dist[i] << endl;
}

int main() {
    int V = 6;
    int E = 9;
    vector<Edge> edges(E);

    edges[0] = {0, 1, 5};
    edges[1] = {0, 2, 2};
    edges[2] = {1, 3, 6};
    edges[3] = {1, 4, -2};
    edges[4] = {2, 1, 1};
    edges[5] = {2, 4, 3};
    edges[6] = {3, 5, 1};
    edges[7] = {4, 3, 4};
    edges[8] = {4, 5, -1};

    int src = 0;

    bellmanFord(V, E, src, edges);

    return 0;
}