#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge
struct Edge {
    int u, v, weight;
};

// Structure to represent a disjoint set for union-find
struct DisjointSets {
    vector<int> parent, rank;

    DisjointSets(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    // Find the representative of a set
    int find(int u) {
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }

    // Union by rank
    void merge(int u, int v) {
        int set_u = find(u);
        int set_v = find(v);

        if (set_u != set_v) {
            if (rank[set_u] < rank[set_v])
                parent[set_u] = set_v;
            else if (rank[set_u] > rank[set_v])
                parent[set_v] = set_u;
            else {
                parent[set_v] = set_u;
                rank[set_u]++;
            }
        }
    }
};

// Function to find MST using Kruskal's Algorithm
void KruskalMST(vector<Edge>& edges, int V) {
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
        return a.weight < b.weight;
    });

    DisjointSets ds(V);
    vector<Edge> mst;

    for (Edge e : edges) {
        if (ds.find(e.u) != ds.find(e.v)) {
            mst.push_back(e);
            ds.merge(e.u, e.v);
        }
    }

    cout << "\nEdges in the Minimum Spanning Tree:\n";
    for (Edge e : mst) {
        cout << e.u << " - " << e.v << " : " << e.weight << "\n";
    }
}

int main() {
    int V = 4; // Number of vertices
    vector<Edge> edges = {
        {0, 1, 8}, {0, 2, 7}, {0, 3, 9}, {1, 3, 12}, {2, 3, 3}
    };

    KruskalMST(edges, V);

    return 0;
}